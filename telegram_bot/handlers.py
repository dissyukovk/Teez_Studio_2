# telegram_bot/handlers.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª–æ–≥–∏–∫—É
from . import keyboards
from .states import (
    StatsState, ReadyPhotosState, AuthState, UpdateInfoState, OperationsState, CheckBarcodesState
    )

from .auth_logic import check_user_credentials, update_user_telegram_profile
from manager.stats_logic import get_fs_all_stats
from manager.queue_logic import get_queue_stats_message_async
from manager.photo_logic import get_ready_photos_by_barcodes
from manager.product_logic import update_products_info_by_barcodes
from manager.product_logic import get_product_operations_by_barcode
from manager.checkbarcode_logic import check_barcodes 
from core.models import UserProfile
from telegram_bot.bot_instance import bot

# –°–æ–∑–¥–∞–µ–º Router
router = Router()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (—Ç–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–π) ---
@router.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext) -> None:
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –í–°–ï —Ä–æ–ª–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—Ä–æ–∏—Ç –¥–ª—è –Ω–µ–≥–æ —Å–æ—Å—Ç–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await state.clear()

    try:
        user_profile = await UserProfile.objects.select_related('user').aget(telegram_id=str(message.from_user.id))
        user = user_profile.user
        user_groups = [group.name async for group in user.groups.all()]

        if not user_groups:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ —Ä–æ–ª–µ–π
            response_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –£ –≤–∞—Å –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Ä–æ–ª–∏."
            reply_markup = keyboards.get_default_keyboard()
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏
            response_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!"
            # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
            reply_markup = keyboards.get_dynamic_keyboard_for_user(user_groups)

    except UserProfile.DoesNotExist:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        response_text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç."
        reply_markup = keyboards.get_default_keyboard()

    await message.answer(response_text, reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º, –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def process_stats_button(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    stats_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="stats_period_today"),
            types.InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="stats_period_yesterday")
        ]
    ])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
    await state.set_state(StatsState.waiting_for_date)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    sent_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*.",
        reply_markup=stats_keyboard,
        parse_mode="Markdown"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data(message_to_edit=sent_message.message_id)


# --- –ù–û–í–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" / "–í—á–µ—Ä–∞" ---
@router.callback_query(F.data.startswith("stats_period_"))
async def process_stats_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer() # "—É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏"
    period = callback.data.split("_")[-1]

    if period == "today":
        date_obj = datetime.now()
    elif period == "yesterday":
        date_obj = datetime.now() - timedelta(days=1)
    else:
        await callback.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        await state.clear()
        return

    date_str = date_obj.strftime('%d.%m.%Y')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
    await callback.message.edit_text(f"üîç –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {date_str}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    stats_message = await get_fs_all_stats(date_str)
    await callback.message.edit_text(stats_message)
    await state.clear()


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã ---
@router.message(StatsState.waiting_for_date)
async def process_date_for_stats(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    message_id_to_edit = user_data.get("message_to_edit")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞—Ç–æ–π, —á—Ç–æ–±—ã –Ω–µ –º—É—Å–æ—Ä–∏—Ç—å –≤ —á–∞—Ç–µ
    await message.delete()

    date_input = message.text.strip()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_id_to_edit:
        await bot.edit_message_text(f"üîç –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {date_input}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", chat_id=message.chat.id, message_id=message_id_to_edit)

    stats_message = await get_fs_all_stats(date_input)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if message_id_to_edit:
        await bot.edit_message_text(stats_message, chat_id=message.chat.id, message_id=message_id_to_edit)
    else: # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ ID –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message.answer(stats_message)

    if "‚ùå" not in stats_message:
        await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—á–µ—Ä–µ–¥–∏ ---
@router.message(Command("queue"))
@router.message(F.text == "üîÄ –û—á–µ—Ä–µ–¥–∏")
async def process_queues_button(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    from manager.queue_logic import get_queue_stats_message_async
    temp_message = await message.answer("üîç –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–µ—Ä–µ–¥—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        stats_message = await get_queue_stats_message_async()
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await temp_message.edit_text(stats_message, parse_mode="Markdown")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await temp_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å–µ–±—è
        print(f"Error in get_queue_stats_message_async: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–∫–ø–∏ –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ ---
@router.message(Command("readyphotos"))
@router.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ")
async def process_ready_photos_button(message: types.Message, state: FSMContext):
    from manager.photo_logic import get_ready_photos_by_barcodes
    await state.set_state(ReadyPhotosState.waiting_for_barcodes)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ö–∞–∂–¥—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ ---
@router.message(ReadyPhotosState.waiting_for_barcodes)
async def process_barcodes_for_photos(message: types.Message, state: FSMContext):
    from manager.photo_logic import get_ready_photos_by_barcodes
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
    temp_message = await message.answer("üîç –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    barcodes = [line.strip() for line in message.text.split('\n') if line.strip()]

    if not barcodes:
        await temp_message.edit_text("–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        return

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    reply_message = await get_ready_photos_by_barcodes(barcodes)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await temp_message.edit_text(reply_message)

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()



# --- –ü—Ä–∏—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" ---
@router.message(Command("addtelegramid"))
@router.message(F.text == "üîë –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def process_attach_account_button(message: types.Message, state: FSMContext):
    # –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type != "private":
        await message.answer("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return

    from core.models import UserProfile
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º ID
        profile = await UserProfile.objects.select_related('user').aget(telegram_id=str(message.from_user.id))
        # –ï—Å–ª–∏ –µ—Å—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
        await state.set_state(AuthState.waiting_for_confirmation)

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–î–∞, –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–æ–≤–æ–º—É", callback_data="auth_confirm_yes")],
            [types.InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="auth_confirm_no")]
        ])
        await message.answer(
            f"–í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *{profile.user.username}*.\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É?",
            reply_markup=confirmation_kb,
            parse_mode="Markdown"
        )
    except UserProfile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –ª–æ–≥–∏–Ω
        await state.set_state(AuthState.waiting_for_login)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@router.callback_query(AuthState.waiting_for_confirmation)
async def process_auth_confirmation(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer() # "—É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    if callback.data == "auth_confirm_yes":
        await state.set_state(AuthState.waiting_for_login)
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:")
    else:
        await state.clear()
        await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ ---
@router.message(AuthState.waiting_for_login)
async def process_auth_login(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(login=message.text.strip())
    await state.set_state(AuthState.waiting_for_password)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è ---
@router.message(AuthState.waiting_for_password)
async def process_auth_password(message: types.Message, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    user_data = await state.get_data()
    login = user_data.get('login')
    password = message.text.strip()

    # !!! –í–ê–ñ–ù–û: –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —á–∞—Ç–∞ !!!
    await message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
    temp_message = await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
    is_valid = await check_user_credentials(login, password)

    if is_valid:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        updated = await update_user_telegram_profile(
            username=login,
            telegram_id=message.from_user.id,
            telegram_name=message.from_user.username or ""
        )
        if updated:
            await temp_message.edit_text("‚úÖ –£—Å–ø–µ—à–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.")
        else:
            await temp_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:
        await temp_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")

    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /updateinfo –∏ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ" ---
@router.message(Command("updateinfo"))
@router.message(F.text == "‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ")
async def cmd_update_info_start(message: types.Message, state: FSMContext):
    # --- –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í ---
    try:
        user_profile = await UserProfile.objects.select_related('user').aget(telegram_id=str(message.from_user.id))
        user_groups = {group.name async for group in user_profile.user.groups.all()}
        if '–ú–µ–Ω–µ–¥–∂–µ—Ä' not in user_groups:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
    except UserProfile.DoesNotExist:
        await message.answer("‚ùå –Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.set_state(UpdateInfoState.waiting_for_barcodes)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n"
        "–ö–∞–∂–¥—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ ---
@router.message(UpdateInfoState.waiting_for_barcodes)
async def process_update_info_barcodes(message: types.Message, state: FSMContext):
    barcodes = [line.strip() for line in message.text.split('\n') if line.strip()]
    if not barcodes:
        await message.answer("–°–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –≤ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(barcodes=barcodes)
    await state.set_state(UpdateInfoState.waiting_for_info_text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è 'Info' (–æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞):")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—è Info ---
@router.message(UpdateInfoState.waiting_for_info_text)
async def process_update_info_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    barcodes = user_data.get('barcodes', [])
    info_text = message.text # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º strip(), —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ

    temp_message = await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
    result = await update_products_info_by_barcodes(barcodes, info_text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    updated_count = result.get('updated_count', 0)
    missing_barcodes = result.get('missing_barcodes', [])

    message_lines = [f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {updated_count} —Ç–æ–≤–∞—Ä–æ–≤."]
    if missing_barcodes:
        message_lines.append("\n" + "–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã:")
        message_lines.extend(missing_barcodes)

    final_message = "\n".join(message_lines)
    await temp_message.edit_text(final_message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operations –∏ –∫–Ω–æ–ø–∫–∏ "–û–ø–µ—Ä–∞—Ü–∏–∏" ---
@router.message(Command("operations"))
@router.message(F.text == "‚ùî –û–ø–µ—Ä–∞—Ü–∏–∏")
async def cmd_operations_start(message: types.Message, state: FSMContext):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–µ—Ç
    await state.set_state(OperationsState.waiting_for_barcode)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π ---
@router.message(OperationsState.waiting_for_barcode)
async def process_operations_barcode(message: types.Message, state: FSMContext):
    barcode = message.text.strip()
    if not barcode:
        await message.answer("–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    temp_message = await message.answer("üîç –ò—â—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É...")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
    operations_message = await get_product_operations_by_barcode(barcode)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await temp_message.edit_text(operations_message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –®–ö ---
@router.message(Command("checkbarcodes"))
@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –®–ö")
async def cmd_check_barcodes_start(message: types.Message, state: FSMContext):
    await state.set_state(CheckBarcodesState.waiting_for_barcodes)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –®–ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è ---
@router.message(CheckBarcodesState.waiting_for_barcodes)
async def process_check_barcodes(message: types.Message, state: FSMContext):
    barcodes = [
        line.strip() for line in message.text.split("\n")
        if line.strip()
    ]
    if not barcodes:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return

    # –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º HTML-–æ—Ç–≤–µ—Ç
    result_text = await check_barcodes(barcodes)

    # —à–ª—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–∏–Ω–∏–º–∞—è HTML-—Ä–∞–∑–º–µ—Ç–∫—É hbold/hcode
    await message.answer(
        result_text,
        parse_mode="HTML"
    )
    await state.clear()
