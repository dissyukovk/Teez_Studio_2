"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import logging
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9vyjmc03-2=c28)o!^$80b_26qiogeshf&-0gh+^o)lg@fw1x$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_q',
    'core',
    'ftback',
    'stockman',
    'manager',
    'okz',
    'auto',
    'render',
    'retoucher',
    'SeniorRetoucher',
    'photographer',
    'ElectronAPI',
    'telegram_bot',
    'guest',
    'hrm',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'debug_toolbar',
    'django_filters',
    'django_extensions',
    'channels'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,  # Set the default page size to 100
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

MIDDLEWARE = [
    # SecurityMiddleware должен идти одним из первых
    'django.middleware.security.SecurityMiddleware',
    
    # WhiteNoise должен идти сразу после SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    # Далее стандартные middleware Django
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # CorsMiddleware лучше разместить здесь, до CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',
    
    # CommonMiddleware теперь в одном экземпляре
    'django.middleware.common.CommonMiddleware',
    
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Debug Toolbar обычно идет в конце
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=40),  # Set access token lifetime (e.g., 1 hour)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),  # Set refresh token lifetime (e.g., 7 days)
    'ROTATE_REFRESH_TOKENS': True,  # Automatically refresh tokens with every access
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens after rotation
}

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'
ASGI_APPLICATION = 'myproject.asgi.application'

# Используем Redis как бэкенд для каналов
CHANNEL_LAYERS = {
    'default': {
        # 'BACKEND': 'channels.layers.InMemoryChannelLayer',  # Для разработки
        # Для продакшена, используем Redis:
        'BACKEND': 'channels_redis.core.RedisChannelLayer', # <-- ИЗМЕНЕНО
        'CONFIG': {
            "hosts": [("localhost", 6379)], # <-- Убедитесь, что это ваш адрес Redis
        },
    },
}



# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'myproject',
        'USER': 'postgres',
        'PASSWORD': 'vp3whbjvp8asd',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Almaty'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': { # Добавляем форматер для более детального вывода
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Используем более детальный форматер
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    'loggers': {
        'django': { # Логи Django
            'handlers': ['console'],
            'level': 'INFO', # Подробные логи от Django
            'propagate': False,
        },
        'django.request': { # Логи обработки запросов
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False, # Не передавать сообщения в 'django' логгер, чтобы избежать дублирования
        },
        'django.db.backends': { # Логи SQL-запросов (у вас уже есть, но можно поднять до DEBUG)
            'level': 'INFO', # Будет показывать все SQL запросы
            'handlers': ['console'],
            'propagate': False,
        },
        'rest_framework': { # Логи от Django REST Framework
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'render': { # Замените 'your_app_name' на имя вашего приложения
            'handlers': ['console'],
            'level': 'DEBUG', # Уровень для логов вашего приложения
            'propagate': False, # Не передавать сообщения корневому логгеру, если он уже настроен
        },
        'retoucher': { # Assuming your app with views/tasks is named 'retoucher'
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


INTERNAL_IPS = [
    '127.0.0.1',
]

CACHES = {
    'default': {
        # Для разработки можно использовать LocMemCache, но он не шарится между процессами
        # 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        # 'LOCATION': 'unique-snowflake',

        # Рекомендуется для продакшена (пример Redis):
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1', # Укажите ваш URL Redis
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }

        # Или Memcached:
        # 'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        # 'LOCATION': '127.0.0.1:11211',
    }
}


# Настройки Django-Q
Q_CLUSTER = {
    'name': 'myproject_q',
    'workers': 6,  # Количество рабочих процессов, можно менять
    'timeout': 300, # Максимальное время выполнения задачи в секундах
    'retry': 360,  # Время в секундах, через которое проваленная задача будет повторена
    'attempts': 3, 
    'queue_limit': 50,
    'bulk': 6,
    # Используем Redis как брокер сообщений (быстро и надежно)
    'redis': {
        'host': '127.0.0.1',
        'port': 6379,
        'db': 0, # Убедитесь, что эта БД не пересекается с другими (например, для кэша)
    }
}


STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Путь для collectstatic

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'static'),
]


SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'credentials.json')

FRONTEND_BASE_URL = 'http://192.168.1.196:3000'
API_AND_MEDIA_BASE_URL = 'http://192.168.1.196:8000'
