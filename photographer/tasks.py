# photographer/tasks.py
import logging
import re
from datetime import datetime, timedelta
from django.conf import settings
from django.utils import timezone
from django.db.models import Sum, Q, Count, Exists, OuterRef, Min, Value, F
from django.db.models.functions import Coalesce
from aiogram.utils.markdown import hbold, hcode
from asgiref.sync import async_to_sync
from django_q.tasks import async_task

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º google api –∫–ª–∏–µ–Ω—Ç—ã
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏
from core.models import STRequest, STRequestProduct, STRequestType
from stockman.views import determine_and_set_strequest_type

logger = logging.getLogger(__name__)

def _get_photographer_stats(start_date, end_date):
    products_filter = (
        Q(strequestproduct__photo_status__id__in=[1, 2, 25]) &
        Q(strequestproduct__sphoto_status__id=1)
    )

    stats = (
        STRequest.objects
        .filter(photo_date__range=(start_date, end_date),
                photographer__isnull=False)
        # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–º—è/username
        .values(
            'photographer__first_name',
            'photographer__last_name',
            'photographer__username',
        )
        # —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ strequestproduct –ø–æ —É—Å–ª–æ–≤–∏—é
        .annotate(
            total_products=Count(
                'strequestproduct',
                filter=products_filter,
            )
        )
        .order_by('-total_products')
    )

    result = []
    for item in stats:
        count = item['total_products']
        if count > 0:
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            name = f"{item['photographer__first_name']} {item['photographer__last_name']}".strip()
            if not name:
                name = item['photographer__username']
            result.append({'name': name, 'count': count})
    return result


def schedule_photographer_stats():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞–º.
    """
    print("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ schedule_photographer_stats...")

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    now = timezone.now()
    start_of_today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    start_of_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –º–µ—Å—è—Ü
    today_stats = _get_photographer_stats(start_of_today, now)
    month_stats = _get_photographer_stats(start_of_month, now)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    message_lines = [hbold("–°–Ω—è—Ç–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")]
    if today_stats:
        for stat in today_stats:
            message_lines.append(f"{hbold(stat['name'])} - {stat['count']}")
    else:
        message_lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    message_lines.append("\n" + hbold("–ò—Ç–æ–≥–æ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:"))
    if month_stats:
        for stat in month_stats:
            message_lines.append(f"{hbold(stat['name'])} - {stat['count']}")
    else:
        message_lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥")

    message_text = "\n".join(message_lines)

    # 4. –í—ã—á–∏—Å–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    base_date = datetime.strptime("10.03.2025", "%d.%m.%Y").date()
    days_diff = (now.date() - base_date).days
    remainder_fraction = (days_diff % 4) / 4.0

    if remainder_fraction in [0.0, 0.25]:
        target_chat_id = "-1002397911962"
    elif remainder_fraction in [0.5, 0.75]:
        target_chat_id = "-1002347741124"
    else:
        target_chat_id = "1788046722"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –≤ —á–∞—Ç {target_chat_id}...")
    async_task(
        'telegram_bot.tasks.send_message_task', # –ü—É—Ç—å –∫ –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        chat_id=target_chat_id,
        text=message_text
    )
    print("–ó–∞–¥–∞—á–∞ schedule_photographer_stats –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


#–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏ - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
def update_all_strequest_types():
    """
    –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º STRequest —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º=2 –∏ STRequestTypeBlocked=False
    –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–º STRequestType —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É.
    """
    qs = STRequest.objects.filter(status_id=2, STRequestTypeBlocked=False)
    for st in qs:
        # determine_and_set_strequest_type —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        determine_and_set_strequest_type(st.RequestNumber)

# --- –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö ---
def send_priority_strequests_notification():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–ª—É—á–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ 
    –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—ä–µ–º–∫—É, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É.
    –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ö–µ–ª–ø–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏.
    """
    # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ ---
    TARGET_CHAT_ID = -1002371513464
    LIMIT_NORMAL = 10
    LIMIT_CLOTHING = 5
    LIMIT_KGT = 3
    TYPE_NORMAL_ID = 1    # '–û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'
    TYPE_CLOTHING_ID = 2  # '–û–¥–µ–∂–¥–∞' (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
    TYPE_KGT_ID = 3       # '–ö–ì–¢' (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)

    def _fetch_and_group_priority_requests():
        """–í–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞—è–≤–æ–∫."""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î...")
        
        queryset = STRequest.objects.filter(status_id=2)
        
        priority_subquery = STRequestProduct.objects.filter(
            request=OuterRef('pk'),
            product__priority=True
        )
        queryset = queryset.annotate(has_priority_product=Exists(priority_subquery))
        
        very_far_date = timezone.make_aware(datetime(9999, 12, 31, 23, 59, 59))
        queryset = queryset.annotate(
            min_income_date_raw=Min('strequestproduct__product__income_date')
        ).annotate(
            min_income_date=Coalesce('min_income_date_raw', Value(very_far_date))
        )
        
        queryset = queryset.order_by(
            F('has_priority_product').desc(),
            F('min_income_date').asc()
        ).values('RequestNumber', 'STRequestType_id')
        
        grouped_requests = {"normal": [], "clothing": [], "kgt": []}
        all_requests = list(queryset)

        for req in all_requests:
            req_type = req.get('STRequestType_id')
            req_num = req.get('RequestNumber')

            if req_type == TYPE_NORMAL_ID and len(grouped_requests["normal"]) < LIMIT_NORMAL:
                grouped_requests["normal"].append(req_num)
            elif req_type == TYPE_CLOTHING_ID and len(grouped_requests["clothing"]) < LIMIT_CLOTHING:
                grouped_requests["clothing"].append(req_num)
            elif req_type == TYPE_KGT_ID and len(grouped_requests["kgt"]) < LIMIT_KGT:
                grouped_requests["kgt"].append(req_num)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: –û–±—ã—á–Ω—ã–µ={len(grouped_requests['normal'])}, –û–¥–µ–∂–¥–∞={len(grouped_requests['clothing'])}, –ö–ì–¢={len(grouped_requests['kgt'])}")
        return grouped_requests

    def _format_priority_requests_message(grouped_requests: dict) -> str | None:
        """–í–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not any(grouped_requests.values()):
            return None

        message_parts = [hbold("üìå –ù–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏:") + "\n"]

        if grouped_requests["normal"]:
            message_parts.append(hbold("\n–û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:"))
            message_parts.extend([hcode(req_num) for req_num in grouped_requests["normal"]])
        
        if grouped_requests["clothing"]:
            message_parts.append(hbold("\n–û–¥–µ–∂–¥–∞:"))
            message_parts.extend([hcode(req_num) for req_num in grouped_requests["clothing"]])

        if grouped_requests["kgt"]:
            message_parts.append(hbold("\n–ö–ì–¢:"))
            message_parts.extend([hcode(req_num) for req_num in grouped_requests["kgt"]])

        return "\n".join(message_parts)

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∑–∞–¥–∞—á–∏ ---
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö...")
    try:
        grouped_data = _fetch_and_group_priority_requests()
        message_to_send = _format_priority_requests_message(grouped_data)

        if message_to_send:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {TARGET_CHAT_ID}...")
            async_task(
                'telegram_bot.tasks.send_message_task',
                chat_id=TARGET_CHAT_ID,
                text=message_to_send,
                parse_mode='HTML'
            )
            logger.info("–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")

    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ send_priority_strequests_notification:")
        raise e

def _get_google_drive_file_count(service, folder_url: str) -> int | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ Google Drive, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –û–±—â–∏–µ –¥–∏—Å–∫–∏.
    """
    if not folder_url or not isinstance(folder_url, str):
        return 0

    match = re.search(r'/folders/([a-zA-Z0-9_-]+)', folder_url)
    if not match:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–∞–ø–∫–∏ –∏–∑ URL: {folder_url}")
        return None
    folder_id = match.group(1)

    try:
        q = f"'{folder_id}' in parents and trashed = false"
        
        results = service.files().list(
            q=q,
            fields="files(id)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True
        ).execute()

        items = results.get('files', [])
        return len(items)

    except HttpError as error:
        logger.error(f"–û—à–∏–±–∫–∞ Google Drive API –¥–ª—è –ø–∞–ø–∫–∏ {folder_id}: {error}")
        return None
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Drive –¥–ª—è –ø–∞–ø–∫–∏ {folder_id}: {e}")
        return None


def check_photographer_folders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤.
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...")

    thirty_minutes_ago = timezone.now() - timedelta(minutes=30)
    products_to_check = STRequestProduct.objects.filter(
        sphoto_status_id=1,
        senior_check_date__gte=thirty_minutes_ago
    ).select_related('product', 'photo_status')

    if not products_to_check:
        logger.info("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(products_to_check)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    no_folder_list = []
    wrong_status_list = []
    too_few_files_list = []

    try:
        creds = service_account.Credentials.from_service_account_file(
            settings.SERVICE_ACCOUNT_FILE,
            scopes=['https://www.googleapis.com/auth/drive.readonly']
        )
        google_service = build('drive', 'v3', credentials=creds)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google API. {e}")
        return

    for item in products_to_check:
        barcode = item.product.barcode
        photo_status_id = item.photo_status.id if item.photo_status else None
        photos_link = item.photos_link

        if not photos_link:
            no_folder_list.append(hcode(barcode))
            continue

        if photo_status_id is None or photo_status_id == 10:
            wrong_status_list.append(hcode(barcode))
            continue
        
        file_count = _get_google_drive_file_count(google_service, photos_link)
        
        if file_count is None:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {barcode}: {photos_link}")
            continue

        if photo_status_id == 1 and file_count < 4:
            too_few_files_list.append(f"{hcode(barcode)} - {photos_link}")
        
        elif photo_status_id in [2, 25] and file_count < 1:
            too_few_files_list.append(f"{hcode(barcode)} - {photos_link}")

    if wrong_status_list or too_few_files_list or no_folder_list:
        message_parts = [hbold("üö® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ üö®\n")]

        if wrong_status_list:
            message_parts.append(hbold("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:"))
            message_parts.extend(wrong_status_list)
            message_parts.append("")

        if too_few_files_list:
            message_parts.append(hbold("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ñ–æ—Ç–æ:"))
            message_parts.extend(too_few_files_list)
            message_parts.append("")

        if no_folder_list:
            message_parts.append(hbold("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞:"))
            message_parts.extend(no_folder_list)

        message_text = "\n".join(message_parts)
        
        # --- –ü–†–ê–í–ò–õ–¨–ù–´–ô ID –ß–ê–¢–ê –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í ---
        target_chat_id = -1002559221974
        MESSAGE_THREAD_ID = 1519

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç {target_chat_id}...")
        async_task(
            'telegram_bot.tasks.send_message_task',
            chat_id=target_chat_id,
            text=message_text,
            message_thread_id=MESSAGE_THREAD_ID,
            parse_mode='HTML'
        )
    else:
        logger.info("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# +++ –ö–û–ù–ï–¶: –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î +++

#NOFOTO - Google sheets
def add_nofoto_to_google_sheet(barcode: str, name: str, date_str: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ '–ë–µ–∑ —Ñ–æ—Ç–æ' –≤ Google –¢–∞–±–ª–∏—Ü—É.

    Args:
        barcode (str): –®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞.
        name (str): –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥'.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –®–ö {barcode} –≤ Google Sheet 'NoFoto'.")

    SPREADSHEET_ID = '17NWqedOnWSpUROrjWrrqZDxfurqDhJuT4meU2p8mc9s'
    # –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ª–∏—Å—Ç–∞. '–õ–∏—Å—Ç1' - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–µ, –∏–∑–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å.
    RANGE_NAME = '–õ–∏—Å—Ç1'
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ API
        creds = service_account.Credentials.from_service_account_file(
            settings.SERVICE_ACCOUNT_FILE,
            scopes=SCOPES
        )
        service = build('sheets', 'v4', credentials=creds)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        values = [
            [barcode, name, date_str]
        ]
        body = {
            'values': values
        }

        # –í—ã–∑–æ–≤ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
        result = service.spreadsheets().values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            valueInputOption='USER_ENTERED',
            insertDataOption='INSERT_ROWS',
            body=body
        ).execute()

        logger.info(f"–®–ö {barcode} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheet. {result.get('updates').get('updatedCells')} —è—á–µ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    except HttpError as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Google Sheets API –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –®–ö {barcode}: {error}")
    except FileNotFoundError:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª credentials '{settings.SERVICE_ACCOUNT_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ add_nofoto_to_google_sheet –¥–ª—è –®–ö {barcode}: {e}")
