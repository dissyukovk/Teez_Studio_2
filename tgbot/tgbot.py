import telebot
#import schedule
import time
import threading
from datetime import datetime, timedelta
import requests
from .botconfig import BACKEND_URL, TELEGRAM_TOKEN
from .dynamic_stats_sender import (
    send_photographers_dynamic_stats,
    send_queue_stats_scheduled,
    send_queue_stats,
    send_queue_stats_okz_scheduled,
    scheduled_order_status_refresh,
    send_product_operations_stats,
    get_daily_moderation_stats_message,
    send_daily_priority_strequests_notification
    )
from .manager import (
    get_product_operations,
    call_update_product_info_endpoint
    )


CHAT_ID = '-1002559221974'  # ID —á–∞—Ç–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
YOUR_THREAD_ID = '1'
YESTERDAY_STATS_CHAT_ID = '-1002559221974'
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞ –ø–æ chat_id
conversation_data = {}

#############################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
#############################################
def get_stats(date_str):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-MM-DD
    –∏ –¥–µ–ª–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.
    """
    try:
        date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy"

    formatted_date = date_obj.strftime('%Y-%m-%d')
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ—Ä–Ω—ã–π
    endpoint_url = f"{BACKEND_URL}/mn/fsallstats/"
    params = {
        "start_date": formatted_date,
        "end_date": formatted_date,
    }

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        response = requests.get(endpoint_url, params=params, timeout=15)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        data = response.json()
    except requests.exceptions.Timeout:
         return f"‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è ({endpoint_url})"
    except requests.exceptions.RequestException as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∑–¥–µ—Å—å
        # print(f"Request error: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∫ {endpoint_url}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."
    except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSONDecodeError)
        # print(f"Unexpected error: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    stats = data.get(formatted_date)
    if not stats:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        # print(f"Data received for {formatted_date}: {data}")
        return f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π –∏ —ç–º–æ–¥–∑–∏ ---
    keys_order = [
        "–ó–∞–∫–∞–∑–∞–Ω–æ",
        "–ü—Ä–∏–Ω—è—Ç–æ",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        "–ë—Ä–∞–∫ —Ç–æ–≤–∞—Ä–∞",
        "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ",
        "–û—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ",
        "–ë—Ä–∞–∫ –ø–æ —Å—ä–µ–º–∫–µ",
        # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
        "–°–¥–µ–ª–∞–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∞—Ö",
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤",
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç —Ñ—Å",
    ]
    emojis = {
        "–ó–∞–∫–∞–∑–∞–Ω–æ": "üì¶",
        "–ü—Ä–∏–Ω—è—Ç–æ": "üì•",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "üöö",
        "–ë—Ä–∞–∫ —Ç–æ–≤–∞—Ä–∞": "‚ùå",
        "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ": "üì∏",
        "–û—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ": "üé®",
        "–ë—Ä–∞–∫ –ø–æ —Å—ä–µ–º–∫–µ": "‚ùó",
        # –ù–æ–≤—ã–µ —ç–º–æ–¥–∑–∏:
        "–°–¥–µ–ª–∞–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": "¬Æ", # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ‚úÖ, üñºÔ∏è
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∞—Ö": "üö´", # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: üôÖ‚Äç‚ôÇÔ∏è, üëé
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": "üíæ",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: üì§ (—Ä–µ–Ω–¥–µ—Ä—ã)
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç —Ñ—Å": "üíæ", # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ‚¨ÜÔ∏è (—Ñ–æ—Ç–æ)
    }
    # --- –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---

    display_date = date_obj.strftime('%d.%m.%Y')
    message_lines = [f"üìä *–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ –∑–∞ {display_date}:*",
                       "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"]
    found_metrics = 0
    for key in keys_order:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get —Å –¥–µ—Ñ–æ–ª—Ç–æ–º 0 –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API
        value = stats.get(key, 0)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º,
        # –Ω–æ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        message_lines.append(f"{emojis.get(key, '‚ùì')} {key}: *{value}*")
        if key in stats: # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª–æ
            found_metrics += 1

    message_lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ stats –µ—Å—Ç—å, –Ω–æ –ø—É—Å—Ç–æ–π
    if found_metrics == 0 and stats is not None:
         return f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª–µ–≤—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    return "\n".join(message_lines)

def send_daily_stats():
    today_str = datetime.now().strftime('%d.%m.%Y')
    stats_message = get_stats(today_str)
    
    max_retries = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    for attempt in range(max_retries):
        try:
            bot.send_message(CHAT_ID, stats_message, parse_mode="Markdown")
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}.")
            if attempt == max_retries - 1:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

def send_yesterday_stats():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é get_stats,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π Telegram —á–∞—Ç YESTERDAY_STATS_CHAT_ID
    —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # 1. –í—ã—á–∏—Å–ª—è–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –¥–ª—è get_stats —Ñ–æ—Ä–º–∞—Ç (dd.mm.yyyy)
        yesterday_str_for_get_stats = yesterday.strftime('%d.%m.%Y')
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        yesterday_log_str = yesterday.strftime('%Y-%m-%d')

        print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {yesterday_str_for_get_stats}...")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –≤—á–µ—Ä–∞
        stats_message = get_stats(yesterday_str_for_get_stats)

        if stats_message.startswith("‚ùå") or stats_message.startswith("‚ö†Ô∏è"):
             print(f"–§—É–Ω–∫—Ü–∏—è get_stats –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {stats_message}")
             return

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞: {e}")
        return 

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    max_retries = 3  
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {yesterday_str_for_get_stats} –≤ —á–∞—Ç {YESTERDAY_STATS_CHAT_ID}...")

    for attempt in range(max_retries):
        try:
            bot.send_message(
                chat_id=CHAT_ID,
                text=stats_message,
                parse_mode="Markdown",
                message_thread_id=YOUR_THREAD_ID
            )
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {yesterday_str_for_get_stats} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {YESTERDAY_STATS_CHAT_ID} —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç {YESTERDAY_STATS_CHAT_ID}: {str(e)}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}.")
            if attempt == max_retries - 1:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {yesterday_str_for_get_stats} –≤ —á–∞—Ç {YESTERDAY_STATS_CHAT_ID} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")

#############################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
#############################################
@bot.message_handler(commands=['stats'])
def send_stats(message):
    try:
        command = message.text.split()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if len(command) == 1:
            date_str = datetime.now().strftime('%d.%m.%Y')
        elif len(command) == 2:
            date_str = command[1]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            try:
                datetime.strptime(date_str, '%d.%m.%Y')
            except ValueError:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy")
                return
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats [dd.mm.yyyy]")
            return

        stats_message = get_stats(date_str)
        bot.reply_to(message, stats_message, parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['chatid'])
def send_chatid(message):
    chat_id = message.chat.id
    topic_id = getattr(message, 'message_thread_id', None)
    if topic_id:
        response = f"ID —á–∞—Ç–∞: {chat_id}\nID —Ç–µ–º—ã: {topic_id}"
    else:
        response = f"ID —á–∞—Ç–∞: {chat_id}"
    bot.reply_to(message, response)

@bot.message_handler(commands=['readyphotos'])
def readyphotos_command(message):
    bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ")
    bot.register_next_step_handler(message, process_readyphotos)

def process_readyphotos(message):
    try:
        barcodes = [line.strip() for line in message.text.split("\n") if line.strip()]
        if not barcodes:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        barcodes_param = ",".join(barcodes)
        params = {"barcodes": barcodes_param}
        
        response = requests.get(f"{BACKEND_URL}/ft/ready-photos/", params=params)
        response.raise_for_status()
        data = response.json()
        results = data.get("results", [])
        not_found = data.get("not_found", [])

        reply_lines = []
        for item in results:
            barcode = item.get("barcode", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            retouch_link = item.get("retouch_link", "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏")
            reply_lines.append(f"{barcode} - {retouch_link}")

        if not_found:
            reply_lines.append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —à—Ç—Ä–∏—Ö–∫–æ–¥—ã: " + ", ".join(not_found))
            
        reply_message = "\n".join(reply_lines)
        bot.reply_to(message, reply_message)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

def send_order_accept_message(message_text):
    CHAT_ID_ORDER = '-1002213405207'
    MESSAGE_THREAD_ID = 372
    try:
        bot.send_message(CHAT_ID_ORDER, message_text, parse_mode="Markdown", message_thread_id=MESSAGE_THREAD_ID)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–µ–º–∫–∏: {e}")

@bot.message_handler(commands=['queue'])
def handle_queue_command(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /queue
    send_queue_stats(message.chat.id)


#############################################
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã operations
#############################################

@bot.message_handler(commands=['operations']) #
def operations_command(message): #
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:") #
    bot.register_next_step_handler(message, process_barcode_for_operations) #

def process_barcode_for_operations(message): #
    try:
        barcode = message.text.strip() #
        if not barcode: #
            bot.reply_to(message, "–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /operations –µ—â–µ —Ä–∞–∑.") #
            return #
        
        operations_message = get_product_operations(barcode) #
        bot.reply_to(message, operations_message, parse_mode="Markdown") #

    except Exception as e: #
        error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}" #
        bot.reply_to(message, error_text) #
        print(f"Error in process_barcode_for_operations: {e}") #

#############################################
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /updateinfo
#############################################

@bot.message_handler(commands=['updateinfo'])
def updateinfo_command_handler(message): # –§—É–Ω–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å, –Ω–æ –ª–æ–≥–∏–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è
    chat_id = message.chat.id #
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–µ–ø–µ—Ä—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±—ç–∫–µ–Ω–¥–∞. –ë–æ—Ç –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ (–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ):") #
    # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ message, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏–∑–≤–ª–µ—á—å message.from_user.id
    bot.register_next_step_handler(message, process_barcodes_for_info_update_via_api)

def process_barcodes_for_info_update_via_api(message): # –ù–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø—É—Ç–∞–Ω–∏—Ü—ã
    chat_id = message.chat.id #
    try:
        barcodes_text = message.text.strip() #
        if not barcodes_text: #
            bot.reply_to(message, "–°–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /updateinfo –µ—â–µ —Ä–∞–∑.") #
            return #

        barcodes = [line.strip() for line in barcodes_text.split('\n') if line.strip()] #
        if not barcodes: #
            bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /updateinfo –µ—â–µ —Ä–∞–∑.") #
            return #

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        conversation_data[chat_id] = { #
            "barcodes_for_updateinfo": barcodes, #
            "telegram_user_id": str(message.from_user.id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        
        bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è Info (–æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞):") #
        bot.register_next_step_handler(message, process_new_info_text_via_api)

    except Exception as e: #
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤: {str(e)}") #
        if chat_id in conversation_data: #
            del conversation_data[chat_id] #

def process_new_info_text_via_api(message): # –ù–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    chat_id = message.chat.id #
    try:
        new_info_text = message.text.strip() #
        # new_info_text –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ Info.

        if chat_id not in conversation_data or \
           "barcodes_for_updateinfo" not in conversation_data[chat_id] or \
           "telegram_user_id" not in conversation_data[chat_id]: #
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /updateinfo.") #
            return #

        barcodes_to_update = conversation_data[chat_id]["barcodes_for_updateinfo"] #
        user_telegram_id = conversation_data[chat_id]["telegram_user_id"]

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ manager.py, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API
        response_message_from_api = call_update_product_info_endpoint(
            user_telegram_id, 
            barcodes_to_update, 
            new_info_text
        )
        
        bot.reply_to(message, response_message_from_api) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    except Exception as e: #
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}") #
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        if chat_id in conversation_data: #
            del conversation_data[chat_id] #


#############################################
# –ù–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ chat_id
#############################################
def escape_markdown_legacy(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram `Markdown` (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è).
    """
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä–æ–º Markdown
    escape_chars = ['_']
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    escaped_text = text
    
    for char in escape_chars:
        # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª –Ω–∞ –µ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '_' –Ω–∞ '\_')
        escaped_text = escaped_text.replace(char, '\\' + char)
        
    return escaped_text

def send_custom_message(chat_id, message_text, message_thread_id=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
    —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown-—Å–∏–º–≤–æ–ª–æ–≤.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        message_thread_id: (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É.
    """
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        escaped_text = escape_markdown_legacy(message_text)
        
        bot.send_message(
            chat_id,
            escaped_text,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            parse_mode="Markdown",
            message_thread_id=message_thread_id
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

def send_custom_message_multiple(chat_ids, message_text, message_thread_id=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        chat_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        message_thread_id: (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É.
    """
    for chat_id in chat_ids:
        try:
            bot.send_message(chat_id, message_text, parse_mode="Markdown", message_thread_id=message_thread_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

#############################################
# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ø—Ä–∏–≤—è–∑–∫–∞ Telegram ID
#############################################
def check_existing_telegram(chat_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–π Telegram ID.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: /auto/userprofile_by_telegram/
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä telegram_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
    {"exists": True, "username": "user1"} –∏–ª–∏ {"exists": False}
    """
    try:
        url = f"{BACKEND_URL}/auto/userprofile_by_telegram/"
        params = {"telegram_id": chat_id}
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Telegram ID: {e}")
        return {"exists": False}

def verify_user_credentials(username, password):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: /auto/verify_credentials/
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON {"username": username, "password": password} –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON {"success": True/False}
    """
    try:
        url = f"{BACKEND_URL}/auto/verify_credentials/"
        payload = {"username": username, "password": password}
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        return data.get("success", False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def update_telegram_profile(username, chat_id, telegram_name):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è Telegram ID –∏ –∏–º—è.
    –≠–Ω–¥–ø–æ–∏–Ω—Ç: /auto/update_telegram_id/
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON {"username": username, "telegram_id": chat_id, "telegram_name": telegram_name}
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"success": True/False}
    """
    try:
        url = f"{BACKEND_URL}/auto/update_telegram_id/"
        payload = {
            "username": username,
            "telegram_id": str(chat_id),
            "telegram_name": telegram_name
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        return data.get("success", False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

@bot.message_handler(commands=['addtelegramid'])
def add_telegram_id_command(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö

    chat_id = message.chat.id
    existing = check_existing_telegram(chat_id)
    if existing.get("exists"):
        username = existing.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        bot.reply_to(message, f"–≠—Ç–æ—Ç Telegram ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (–î–∞/–ù–µ—Ç)")
        conversation_data[chat_id] = {"existing": True}
        bot.register_next_step_handler(message, process_confirmation)
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        conversation_data[chat_id] = {"existing": False}
        bot.register_next_step_handler(message, process_login)

def process_confirmation(message):
    chat_id = message.chat.id
    answer = message.text.strip().lower()
    if answer == "–¥–∞":
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        bot.register_next_step_handler(message, process_login)
    else:
        bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        conversation_data.pop(chat_id, None)

def process_login(message):
    chat_id = message.chat.id
    login = message.text.strip()
    conversation_data.setdefault(chat_id, {})["login"] = login
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_password)

def process_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    conversation_data.setdefault(chat_id, {})["password"] = password
    login = conversation_data[chat_id].get("login")
    telegram_username = message.from_user.username if message.from_user.username else ""
    if verify_user_credentials(login, password):
        if update_telegram_profile(login, chat_id, telegram_username):
            bot.reply_to(message, "–í–∞—à Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    conversation_data.pop(chat_id, None)

#############################################
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ 20:30
#############################################
def scheduler_thread():
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ 20:30
    schedule.every().day.at("20:08").do(send_daily_stats)
    schedule.every().day.at("12:25").do(send_yesterday_stats)
    
    schedule.every().day.at("12:29").do(send_photographers_dynamic_stats)
    schedule.every().day.at("16:59").do(send_photographers_dynamic_stats)
    schedule.every().day.at("20:03").do(send_photographers_dynamic_stats)

    schedule.every().day.at("07:55").do(send_queue_stats_scheduled)
    schedule.every().day.at("08:00").do(send_queue_stats_okz_scheduled)
    schedule.every().day.at("20:00").do(send_queue_stats_okz_scheduled)

    schedule.every().day.at("07:59").do(scheduled_order_status_refresh)
    schedule.every().day.at("19:59").do(scheduled_order_status_refresh)

    schedule.every().day.at("12:28").do(send_product_operations_stats)
    schedule.every().day.at("16:58").do(send_product_operations_stats)
    schedule.every().day.at("19:58").do(send_product_operations_stats)

    schedule.every().day.at("20:01").do(get_daily_moderation_stats_message)

    schedule.every().day.at("07:45").do(send_daily_priority_strequests_notification)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

#############################################
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
#############################################
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except requests.exceptions.ReadTimeout:
            print("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")

if __name__ == "__main__":
    scheduler = threading.Thread(target=scheduler_thread)
    scheduler.daemon = True
    scheduler.start()
    run_bot()
