# manager/stats_logic.py
from datetime import datetime, time
from django.db.models import Sum, Count, Case, When, Q, IntegerField
from django.utils import timezone # <<< –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º timezone
from aiogram.utils.markdown import hbold

# ... (–∏–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ) ...
from core.models import (
    OrderProduct, ProductOperation, STRequestProduct, RetouchRequestProduct
)
from render.models import Render, ModerationUpload, ModerationStudioUpload



# vvv –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å async def vvv
async def get_fs_all_stats(date_str: str) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    """
    try:
        date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy"

    # –°–æ–∑–¥–∞–µ–º aware (—Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º) datetime –æ–±—ä–µ–∫—Ç—ã
    start_dt = timezone.make_aware(datetime.combine(date_obj, time.min))
    end_dt = timezone.make_aware(datetime.combine(date_obj, time.max))

    # --- –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å `await` ---

    # 1. –ó–∞–∫–∞–∑–∞–Ω–æ
    ordered_count = await OrderProduct.objects.filter(order__date__range=(start_dt, end_dt)).acount()

    # 2. –û–ø–µ—Ä–∞—Ü–∏–∏
    ops_agg = await ProductOperation.objects.filter(date__range=(start_dt, end_dt)).aaggregate(
        accepted=Count('id', filter=Q(operation_type__id=3)),
        sent=Count('id', filter=Q(operation_type__id=4)),
        defective_product=Count('id', filter=Q(operation_type__id__in=[25, 30]))
    )

    # 3. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ
    photographed_count = await STRequestProduct.objects.filter(
        request__photo_date__range=(start_dt, end_dt),
        photo_status__id__in=[1, 2, 25], sphoto_status__id=1
    ).acount()

    # 4. –†–µ—Ç—É—à—å
    retouch_agg = await RetouchRequestProduct.objects.filter(
        retouch_request__retouch_date__range=(start_dt, end_dt)
    ).aaggregate(
        total_retouched=Count('id', filter=Q(retouch_status__id=2, sretouch_status__id=1)),
        total_defective_shooting=Count('id', filter=Q(retouch_status__id=3, sretouch_status__id=1))
    )
    
    # 5. –†–µ–Ω–¥–µ—Ä—ã
    renders_agg = await Render.objects.filter(CheckTimeStart__range=(start_dt, end_dt)).aaggregate(
        renders_done=Count('id', filter=Q(RetouchStatus__id=6)),
        renders_rejected=Count('id', filter=Q(RetouchStatus__id=7))
    )

    # 6. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤
    moderation_upload_count = await ModerationUpload.objects.filter(
        UploadTimeStart__range=(start_dt, end_dt), UploadStatus__id=2
    ).acount()

    # 7. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –§–°
    moderation_studio_upload_count = await ModerationStudioUpload.objects.filter(
        UploadTimeStart__range=(start_dt, end_dt), UploadStatus__id=2
    ).acount()

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å (—ç—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    stats = {
        "–ó–∞–∫–∞–∑–∞–Ω–æ": ordered_count,
        "–ü—Ä–∏–Ω—è—Ç–æ": ops_agg.get('accepted', 0),
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": ops_agg.get('sent', 0),
        "–ë—Ä–∞–∫ —Ç–æ–≤–∞—Ä–∞": ops_agg.get('defective_product', 0),
        "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ": photographed_count,
        "–û—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ": retouch_agg.get('total_retouched', 0),
        "–ë—Ä–∞–∫ –ø–æ —Å—ä–µ–º–∫–µ": retouch_agg.get('total_defective_shooting', 0),
        "–°–¥–µ–ª–∞–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": renders_agg.get('renders_done', 0),
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∞—Ö": renders_agg.get('renders_rejected', 0),
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": moderation_upload_count,
        "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç —Ñ—Å": moderation_studio_upload_count,
    }
    # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    emojis = {
            "–ó–∞–∫–∞–∑–∞–Ω–æ": "üì¶", "–ü—Ä–∏–Ω—è—Ç–æ": "üì•", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "üöö", "–ë—Ä–∞–∫ —Ç–æ–≤–∞—Ä–∞": "‚ùå",
            "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–æ": "üì∏", "–û—Ç—Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–Ω–æ": "üé®", "–ë—Ä–∞–∫ –ø–æ —Å—ä–µ–º–∫–µ": "‚ùó",
            "–°–¥–µ–ª–∞–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": "üñºÔ∏è", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∞—Ö": "üö´", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤": "üì§",
            "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç —Ñ—Å": "üíæ",
        }
    display_date = date_obj.strftime('%d.%m.%Y')
    message_lines = [
        f"üìä {hbold(f'–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ –∑–∞ {display_date}:')}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ]
    
    for key, value in stats.items():
        emoji = emojis.get(key, '‚ùì')
        message_lines.append(f"{emoji} {key}: {hbold(value)}")
    
    message_lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

    return "\n".join(message_lines)
