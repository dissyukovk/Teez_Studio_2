from typing import List
from aiogram.utils.markdown import hbold, hcode
from datetime import timedelta
from django.utils import timezone

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
from core.models import (
    Product,
    Nofoto,
    Blocked_Shops,
    Blocked_Barcode,
    OrderProduct,
    RetouchRequestProduct,
    STRequestProduct
)


async def check_barcodes(barcodes: List[str]) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º BarcodeCheckView.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    raw = [bc.strip() for bc in barcodes if bc and bc.strip().isdigit()]
    initial_set = {bc.zfill(13) for bc in raw if len(bc) <= 13}
    if not initial_set:
        return "‚ùó –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."

    barcodes_to_check = initial_set.copy()

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    has_photo = set()
    in_retouch_queue = set()
    nofoto = set()
    blocked_by_shop = set()
    blocked_by_category = set()
    blocked_by_barcode = set()
    ordered = set()
    onfs = set()
    possible_zero_stock = set()
    
    # 3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    # 3.1 –ï—Å—Ç—å —Ñ–æ—Ç–æ
    if barcodes_to_check:
        found = set()
        qs = RetouchRequestProduct.objects.filter(
            st_request_product__product__barcode__in=barcodes_to_check,
            retouch_status__id=2,
            sretouch_status__id=1
        ).values_list('st_request_product__product__barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            has_photo.update(found)
            barcodes_to_check -= found

    # 3.2 –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–µ—Ç—É—à—å
    if barcodes_to_check:
        found = set()
        three_days_ago = timezone.now() - timedelta(hours=20)
        qs = STRequestProduct.objects.filter(
            product__barcode__in=barcodes_to_check,
            photo_status__id=1,
            sphoto_status__id=1,
            senior_check_date__gte=three_days_ago
        ).values_list('product__barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            in_retouch_queue.update(found)
            barcodes_to_check -= found

    # 3.3 –ë–µ–∑ —Ñ–æ—Ç–æ (Nofoto)
    if barcodes_to_check:
        found = set()
        qs = Nofoto.objects.filter(
            product__barcode__in=barcodes_to_check
        ).values_list('product__barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            nofoto.update(found)
            barcodes_to_check -= found

    # 3.4 –ë–ª–æ–∫ (–º–∞–≥–∞–∑–∏–Ω)
    if barcodes_to_check:
        found = set()
        shop_ids = {sid async for sid in Blocked_Shops.objects.values_list('shop_id', flat=True)}
        if shop_ids:
            qs = Product.objects.filter(
                barcode__in=barcodes_to_check, 
                seller__in=shop_ids
            ).values_list('barcode', flat=True)
            async for code in qs:
                found.add(code)
            if found:
                blocked_by_shop.update(found)
                barcodes_to_check -= found

    # 3.5 –ë–ª–æ–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    if barcodes_to_check:
        found = set()
        qs = Product.objects.filter(
            barcode__in=barcodes_to_check, 
            category__IsBlocked=True
        ).values_list('barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            blocked_by_category.update(found)
            barcodes_to_check -= found

    # 3.6 –ë–ª–æ–∫ (SKU)
    if barcodes_to_check:
        found = set()
        qs = Blocked_Barcode.objects.filter(
            barcode__in=barcodes_to_check
        ).values_list('barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            blocked_by_barcode.update(found)
            barcodes_to_check -= found

    # 3.7 –ó–∞–∫–∞–∑–∞–Ω–æ
    if barcodes_to_check:
        found = set()
        qs = OrderProduct.objects.filter(
            product__barcode__in=barcodes_to_check,
            order__status__id__in=[2, 3]
        ).values_list('product__barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            ordered.update(found)
            barcodes_to_check -= found

    # 3.8 –ù–∞ –§–°
    if barcodes_to_check:
        found = set()
        qs = Product.objects.filter(
            barcode__in=barcodes_to_check, 
            move_status__id=3
        ).values_list('barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            onfs.update(found)
            barcodes_to_check -= found

    # 3.9 –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤
    if barcodes_to_check:
        found = set()
        qs = Product.objects.filter(
            barcode__in=barcodes_to_check, 
            in_stock_sum=0
        ).values_list('barcode', flat=True)
        async for code in qs:
            found.add(code)
        if found:
            possible_zero_stock.update(found)
            barcodes_to_check -= found

    # 3.10 –ù–µ –Ω–∞–π–¥–µ–Ω—ã
    missed = barcodes_to_check

    # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    sections = [
        ("‚úÖ –ï—Å—Ç—å —Ñ–æ—Ç–æ", has_photo),
        ("‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–µ—Ç—É—à—å", in_retouch_queue),
        ("üö´ –ë–µ–∑ —Ñ–æ—Ç–æ", nofoto),
        ("üîí –ë–ª–æ–∫ (–º–∞–≥–∞–∑–∏–Ω)", blocked_by_shop),
        ("üîí –ë–ª–æ–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)", blocked_by_category),
        ("üîí –ë–ª–æ–∫ (SKU)", blocked_by_barcode),
        ("üõí –ó–∞–∫–∞–∑–∞–Ω–æ", ordered),
        ("üì¶ –ù–∞ –§–°", onfs),
        ("üìâ –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤", possible_zero_stock),
        ("‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω—ã", missed),
    ]
    
    lines: List[str] = []
    total_found = len(initial_set) - len(missed)
    lines.append(hbold(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(initial_set)}, –ù–∞–π–¥–µ–Ω–æ: {total_found}"))
    lines.append("")

    for title, bucket in sections:
        if bucket:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
            lines.append(hbold(f"{title} ({len(bucket)})") + ":")
            for code in sorted(bucket):
                lines.append(hcode(code))
            lines.append("")

    return "\n".join(lines).strip()
