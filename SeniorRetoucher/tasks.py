# SeniorRetoucher/tasks.py
import logging
import re
from datetime import timedelta

from aiogram.utils.markdown import hbold, hcode
from django.conf import settings
from django.utils import timezone
from django_q.tasks import async_task
from django.db import transaction
from django.db.models import Max
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
from core.models import RetouchRequestProduct, STRequestProduct, RetouchRequest

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


def _get_google_drive_file_count(service, folder_url: str) -> int | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ Google Drive, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –û–±—â–∏–µ –¥–∏—Å–∫–∏.
    """
    if not folder_url or not isinstance(folder_url, str):
        return 0

    match = re.search(r'/folders/([a-zA-Z0-9_-]+)', folder_url)
    if not match:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–∞–ø–∫–∏ –∏–∑ URL: {folder_url}")
        return None
    folder_id = match.group(1)

    try:
        q = f"'{folder_id}' in parents and trashed = false"
        
        results = service.files().list(
            q=q,
            fields="files(id)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True
        ).execute()

        items = results.get('files', [])
        return len(items)

    except HttpError as error:
        logger.error(f"–û—à–∏–±–∫–∞ Google Drive API –¥–ª—è –ø–∞–ø–∫–∏ {folder_id}: {error}")
        return None
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Drive –¥–ª—è –ø–∞–ø–∫–∏ {folder_id}: {e}")
        return None


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –≠–¢–û–ô –ó–ê–î–ê–ß–ò ---
def check_retoucher_folders():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫–∏ —Ä–µ—Ç—É—à–µ—Ä–æ–≤ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤.
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ä–µ—Ç—É—à–µ—Ä–æ–≤...")

    thirty_minutes_ago = timezone.now() - timedelta(minutes=30)
    products_to_check = RetouchRequestProduct.objects.filter(
        retouch_status_id=2,
        sretouch_status_id=1,
        retouch_end_date__gte=thirty_minutes_ago
    ).select_related('st_request_product__product')

    if not products_to_check:
        logger.info("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç —Ä–µ—Ç—É—à–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(products_to_check)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    link_error_list = []
    too_few_files_list = []

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google API –û–î–ò–ù –†–ê–ó –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
    try:
        creds = service_account.Credentials.from_service_account_file(
            settings.SERVICE_ACCOUNT_FILE,
            scopes=['https://www.googleapis.com/auth/drive.readonly']
        )
        google_service = build('drive', 'v3', credentials=creds)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google API. {e}")
        return

    for item in products_to_check:
        if not item.st_request_product or not item.st_request_product.product:
            continue
        
        barcode = item.st_request_product.product.barcode
        retouch_link = item.retouch_link

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ü–µ—Ä–µ–¥–∞–µ–º 'google_service' –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
        file_count = _get_google_drive_file_count(google_service, retouch_link)

        if file_count is None:
            link_error_list.append(hcode(barcode))
        elif file_count < 3:
            too_few_files_list.append(f"{hcode(barcode)} - {retouch_link or '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if link_error_list or too_few_files_list:
        message_parts = [hbold("üö® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ä–µ—Ç—É—à–µ—Ä–æ–≤ üö®\n")]

        if link_error_list:
            message_parts.append(hbold("–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):"))
            message_parts.extend(link_error_list)
            message_parts.append("")

        if too_few_files_list:
            message_parts.append(hbold("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤ (< 4):"))
            message_parts.extend(too_few_files_list)

        message_text = "\n".join(message_parts)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç {TARGET_CHAT_ID} (—Ç–µ–º–∞ {MESSAGE_THREAD_ID})...")
        async_task(
            'telegram_bot.tasks.send_message_task',
            chat_id=TARGET_CHAT_ID,
            text=message_text,
            message_thread_id=MESSAGE_THREAD_ID,
            parse_mode='HTML',
            disable_web_page_preview=True 
        )
    else:
        logger.info("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç —Ä–µ—Ç—É—à–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫ —Ä–µ—Ç—É—à–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


#–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—Ç—É—à—å
def schedule_auto_retouch_requests():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—Ç—É—à—å.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ Django-Q.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫—Ä–∞—Ç–Ω–æ–≥–æ 10.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—Ç—É—à—å...")

    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ —Ä–µ—Ç—É—à–∏
    ready_products_qs = STRequestProduct.objects.filter(
        photo_status_id=1,
        sphoto_status_id=1,
        OnRetouch=False
    ).order_by('product__income_date')

    product_count = ready_products_qs.count()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if product_count < 10:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {product_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ—Ç—É—à–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è 10 –∏–ª–∏ –±–æ–ª—å—à–µ. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
        return f"–ù–∞–π–¥–µ–Ω–æ {product_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (–æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ 10)
    products_to_process_count = (product_count // 10) * 10
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {product_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {products_to_process_count}.")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    product_ids_to_process = list(ready_products_qs.values_list('id', flat=True)[:products_to_process_count])
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
    
    created_requests_count = 0
    
    # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—á–∫–∞–º–∏ –ø–æ 10. –¶–∏–∫–ª —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—á–∫–∞–º–∏.
    for i in range(0, len(product_ids_to_process), 10):
        chunk_ids = product_ids_to_process[i:i+10]

        try:
            with transaction.atomic():
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
                last_request_number = RetouchRequest.objects.aggregate(max_number=Max('RequestNumber'))['max_number']
                new_request_number = (last_request_number or 0) + 1
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{new_request_number} –¥–ª—è {len(chunk_ids)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")

                # –°–æ–∑–¥–∞–µ–º RetouchRequest
                new_request = RetouchRequest.objects.create(
                    RequestNumber=new_request_number,
                    retoucher=None,
                    status_id=1,
                    creation_date=timezone.now()
                )

                products_in_chunk = STRequestProduct.objects.filter(id__in=chunk_ids)

                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                RetouchRequestProduct.objects.bulk_create([
                    RetouchRequestProduct(retouch_request=new_request, st_request_product=st_product)
                    for st_product in products_in_chunk
                ])
                products_in_chunk.update(OnRetouch=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
                task_id = async_task(
                    'retoucher.tasks.download_retouch_request_files_task',
                    retouch_request_id=new_request.id,
                    user_id=None
                )
                
                new_request.download_task_id = task_id
                new_request.download_started_at = timezone.now()
                new_request.save(update_fields=['download_task_id', 'download_started_at'])
                
                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {new_request.id} –∏ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É {task_id}.")
                created_requests_count += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–∞—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏–Ω–¥–µ–∫—Å {i}). –û—à–∏–±–∫–∞: {e}", exc_info=True)

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    if created_requests_count > 0:
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_requests_count} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—Ç—É—à—å.")
        
        message = f"–°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—Ç—É—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - {created_requests_count}. –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        chat_id = -1002559221974
        thread_id = 11

        try:
            async_task(
                'telegram_bot.tasks.send_message_task',
                chat_id=chat_id,
                text=message,
                message_thread_id=thread_id
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç {chat_id}, —Ç—Ä–µ–¥ {thread_id}.")
        except Exception as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram. –û—à–∏–±–∫–∞: {e}", exc_info=True)
        
        return f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_requests_count} –∑–∞—è–≤–æ–∫."
    
    return "–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ."
